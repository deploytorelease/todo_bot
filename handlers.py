# handlers.py

from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, FSInputFile
from database import get_db
from models import User, Task, CompletedTask, FinancialRecord, Goal, GoalStep
from ai_module import parse_message, generate_personalized_message, generate_goal_steps
from datetime import datetime, timedelta
from sqlalchemy import select, func
import logging
import matplotlib.pyplot as plt
import io
from scheduler import send_task_reminder, scheduler
from message_utils import send_personalized_message, get_user, get_task
from models import RegularPayment, Milestone
import json




logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TaskStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_due_date = State()

class EditTaskStates(StatesGroup):
    waiting_for_task_id = State()
    waiting_for_new_title = State()
    waiting_for_new_due_date = State()

class ToneStates(StatesGroup):
    waiting_for_tone = State()

class LearningStates(StatesGroup):
    waiting_for_topic = State()

class GoalCreationStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_experience = State()
    waiting_for_available_time = State()
    
async def start_goal_creation(message: types.Message, state: FSMContext):
    await state.set_state(GoalCreationStates.waiting_for_title)
    await message.answer("–ö–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?")

async def process_goal_title(message: types.Message, state: FSMContext):
    await state.update_data(goal_title=message.text)
    await state.set_state(GoalCreationStates.waiting_for_experience)
    await message.answer(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏?\n"
        "1. –ù–æ–≤–∏—á–æ–∫\n"
        "2. –ï—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è\n"
        "3. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
        "4. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    )

async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await state.set_state(GoalCreationStates.waiting_for_available_time)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –æ–±—É—á–µ–Ω–∏—é?\n"
        "1. 1-2 —á–∞—Å–∞\n"
        "2. 3-5 —á–∞—Å–æ–≤\n"
        "3. 6-10 —á–∞—Å–æ–≤\n"
        "4. –ë–æ–ª–µ–µ 10 —á–∞—Å–æ–≤"
    )

async def process_available_time(message: types.Message, state: FSMContext):
    data = await state.get_data()
    goal_title = data['goal_title']
    experience = data['experience']
    available_time = message.text
    
    try:
        async with get_db() as session:
            user = await session.execute(select(User).where(User.user_id == message.from_user.id))
            user = user.scalar_one_or_none()

            if not user:
                user = User(user_id=message.from_user.id)
                session.add(user)
                await session.flush()

            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å —Å —É—á–µ—Ç–æ–º –æ–ø—ã—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            new_goal = Goal(
                user_id=user.user_id,
                title=goal_title,
                user_experience=experience,
                available_time=available_time,
                deadline=calculate_deadline(experience, available_time)
            )
            session.add(new_goal)
            await session.flush()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º –æ–ø—ã—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
            plan = await generate_goal_steps(
                goal_title,
                new_goal.deadline,
                experience,
                available_time
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ milestone'—ã
            for task_info in plan['tasks']:
                new_task = Task(
                    user_id=user.user_id,
                    goal_id=new_goal.id,
                    title=task_info['title'],
                    description=task_info['description'],
                    due_date=task_info['end_date'],
                    start_date=task_info['start_date'],
                    dependencies=json.dumps(task_info['dependencies']),
                    can_parallel=task_info['can_parallel'],
                    deliverables=json.dumps(task_info['deliverables']),
                    progress_metrics=json.dumps(task_info['progress_metrics']),
                    resources=json.dumps(task_info['resources'])
                )
                session.add(new_task)

            for milestone in plan['milestones']:
                new_milestone = Milestone(
                    goal_id=new_goal.id,
                    title=milestone['title'],
                    expected_date=milestone['date'],
                    success_criteria=json.dumps(milestone['criteria'])
                )
                session.add(new_milestone)

            await session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º
            response = format_goal_plan(plan)
            await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.clear()

def calculate_deadline(experience: str, available_time: str) -> datetime:
    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    base_days = {
        "1": 365,  # –ù–æ–≤–∏—á–æ–∫
        "2": 270,  # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è
        "3": 180,  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        "4": 90    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
    }
    
    time_multiplier = {
        "1": 1.5,  # 1-2 —á–∞—Å–∞
        "2": 1.0,  # 3-5 —á–∞—Å–æ–≤
        "3": 0.7,  # 6-10 —á–∞—Å–æ–≤
        "4": 0.5   # –ë–æ–ª–µ–µ 10 —á–∞—Å–æ–≤
    }
    
    days = base_days.get(experience, 365) * time_multiplier.get(available_time, 1.0)
    return datetime.now() + timedelta(days=days)

def format_goal_plan(plan: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    response = ["–ü–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏:\n"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    for i, task in enumerate(plan['tasks'], 1):
        response.append(f"{i}. {task['title']}")
        response.append(f"   –°—Ä–æ–∫: {task['start_date'].strftime('%d.%m.%Y')} - {task['end_date'].strftime('%d.%m.%Y')}")
        response.append(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join(task['deliverables'])}")
        if task['resources']:
            response.append(f"   –†–µ—Å—É—Ä—Å—ã: {', '.join(task['resources'])}")
        response.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
    response.append("\n–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏:")
    for milestone in plan['milestones']:
        response.append(f"üìç {milestone['title']}")
        response.append(f"   –î–∞—Ç–∞: {milestone['date'].strftime('%d.%m.%Y')}")
        response.append(f"   –ö—Ä–∏—Ç–µ—Ä–∏–∏: {', '.join(milestone['criteria'])}")
        response.append("")
    
    return "\n".join(response)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∞–º–∏, "
        "—Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Ü–µ–ª–µ–π. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö, "
        "—Ä–∞—Å—Ö–æ–¥–∞—Ö –∏–ª–∏ —Ü–µ–ª—è—Ö, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
        reply_markup=ReplyKeyboardRemove()
    )
    
async def process_message(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    
    try:
        parsed_data = await parse_message(message.text)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {parsed_data}")
        
        if parsed_data['type'] == 'task':
            response = await handle_task(user_id, parsed_data['data'], message.bot)
        elif parsed_data['type'] == 'finance':
            response = await handle_finance(user_id, parsed_data['data'])
        elif parsed_data['type'] == 'goal':
            response = await handle_goal(message, parsed_data['data'])
        else:
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —É—Ç–æ—á–Ω–∏—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å?"
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {response}")
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")



async def handle_task(user_id: int, task_data: dict, bot) -> str:
    title = task_data['title']
    due_date = datetime.fromisoformat(task_data['due_date'])
    priority = task_data.get('priority', 'medium')
    category = task_data.get('category', '–û–±—â–µ–µ')

    async with get_db() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(select(User).where(User.user_id == user_id))
            user = user.scalar_one_or_none()

            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                user = User(user_id=user_id)
                session.add(user)
                await session.flush()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            new_task = Task(
                user_id=user_id, 
                title=title, 
                due_date=due_date,
                priority=priority,
                category=category
            )
            session.add(new_task)
            await session.commit()
            logging.info(f"New task added: {new_task.title}, due date: {new_task.due_date}")

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∂–æ–± –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            job = scheduler.add_job(
                send_task_reminder,
                trigger='date',
                run_date=new_task.due_date,
                args=[bot, user.user_id, new_task.id]
            )
            new_task.scheduler_job_id = job.id

            await session.commit()
            logging.info(f"New task added: {new_task.title}, due date: {new_task.due_date}")


            return (f"–û—Ç–ª–∏—á–Ω–æ! –Ø –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"–°—Ä–æ–∫: {due_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                    f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ –Ω–µ–π –±–ª–∏–∂–µ –∫ —Å—Ä–æ–∫—É. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å?")

        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        
async def handle_finance(user_id: int, finance_data: dict) -> str:
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {finance_data}")
    async with get_db() as session:
        try:
            user = await session.execute(select(User).where(User.user_id == user_id))
            user = user.scalar_one_or_none()

            if not user:
                user = User(user_id=user_id)
                session.add(user)
                await session.flush()
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}")

            new_record = FinancialRecord(
                user_id=user_id,
                amount=finance_data['amount'],
                currency=finance_data['currency'],
                category=finance_data['category'],
                description=finance_data['description'],
                type=finance_data['type'],  # 'income' –∏–ª–∏ 'expense'
                is_savings=finance_data.get('is_savings', False)
            )
            session.add(new_record)
            await session.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {new_record}")

            if finance_data['type'] == 'income':
                return f"–ó–∞–ø–∏—Å–∞–ª –¥–æ—Ö–æ–¥: {new_record.amount} {new_record.currency} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {new_record.category}."
            else:
                return f"–ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: {new_record.amount} {new_record.currency} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {new_record.category}."

        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        
async def add_regular_payment(user_id: int, payment_data: dict) -> str:
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment_data}")
    async with get_db() as session:
        try:
            user = await session.get(User, user_id)
            if not user:
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

            new_payment = RegularPayment(
                user_id=user_id,
                amount=payment_data['amount'],
                currency=payment_data['currency'],
                category=payment_data['category'],
                description=payment_data['description'],
                frequency=payment_data['frequency'],
                next_payment_date=datetime.fromisoformat(payment_data['next_payment_date'])
            )   
            session.add(new_payment)
            await session.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {new_payment}")

            return f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {new_payment.amount} {new_payment.currency} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {new_payment.category}, —á–∞—Å—Ç–æ—Ç–∞: {new_payment.frequency}."

        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        
async def handle_goal(message: types.Message, goal_data: dict) -> str:
    user_id = message.from_user.id
    try:
        async with get_db() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(select(User).where(User.user_id == user_id))
            user = user.scalar_one_or_none()

            if not user:
                user = User(user_id=user_id)
                session.add(user)
                await session.flush()

            deadline = datetime.fromisoformat(goal_data['deadline'])
            new_goal = Goal(
                user_id=user_id,
                title=goal_data['title'],
                deadline=deadline,
                description=goal_data.get('description', ''),
                user_experience=goal_data.get('experience', 'beginner'),
                available_time=goal_data.get('available_time', 'medium')
            )
            session.add(new_goal)
            await session.flush()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ GPT
            plan = await generate_goal_steps(
                new_goal.title, 
                deadline,
                new_goal.user_experience,
                new_goal.available_time
            )   
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞
            for task_info in plan['tasks']:
                new_task = Task(
                    user_id=user_id,
                    goal_id=new_goal.id,
                    title=task_info['title'],
                    description=task_info.get('description', ''),
                    due_date=task_info['end_date'],
                    start_date=task_info['start_date'],
                    priority='high',
                    is_completed=False,
                    dependencies=json.dumps(task_info.get('dependencies', [])),
                    can_parallel=task_info.get('can_parallel', False),
                    deliverables=json.dumps(task_info.get('deliverables', [])),
                    progress_metrics=json.dumps(task_info.get('progress_metrics', [])),
                    resources=json.dumps(task_info.get('resources', []))
                )
                session.add(new_task)

            await session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            return format_goal_plan(plan)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    

async def update_task_deadline(task: Task, session):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ä–æ–∫–∏ –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    """
    if not task.goal_id:
        return
        
    subsequent_tasks = await session.execute(
        select(Task)
        .where(
            Task.goal_id == task.goal_id,
            Task.order > task.order,
            Task.is_completed == False
        )
        .order_by(Task.order)
    )
    subsequent_tasks = subsequent_tasks.scalars().all()

    if not subsequent_tasks:
        return

    goal = await session.get(Goal, task.goal_id)
    remaining_time = (goal.deadline - datetime.now()).days
    if remaining_time <= 0:
        days_per_task = 1
    else:
        days_per_task = max(1, remaining_time // (len(subsequent_tasks) + 1))

    current_date = datetime.now()
    for subsequent_task in subsequent_tasks:
        current_date += timedelta(days=days_per_task)
        subsequent_task.due_date = min(current_date, goal.deadline)
        session.add(subsequent_task)

# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
async def show_tasks(message: types.Message):
    user_id = message.from_user.id
    async with get_db() as session:
        tasks = await session.execute(
            select(Task).where(Task.user_id == user_id, Task.is_completed == False)
        )
        tasks = tasks.scalars().all()

    if tasks:
        response = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(
            f"ID: {task.id}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task.title}, –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y %H:%M')}"
            for task in tasks
        )
    else:
        response = "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á."

    await message.answer(response)


async def edit_task_command(message: types.Message, state: FSMContext):
    await state.set_state(EditTaskStates.waiting_for_task_id)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /tasks.")


async def update_goal_progress(goal_id: int, session):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ü–µ–ª–∏
        tasks = await session.execute(
            select(Task).where(Task.goal_id == goal_id)
        )
        tasks = tasks.scalars().all()
        
        if not tasks:
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completed = sum(1 for task in tasks if task.is_completed)
        progress = (completed / len(tasks)) * 100

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏
        goal = await session.get(Goal, goal_id)
        if goal:
            goal.progress = progress
            session.add(goal)
            await session.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏: {e}")
        await session.rollback()


async def complete_task_command(message: types.Message):
    task_id = message.get_args()
    if not task_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏")
        return

    async with get_db() as session:
        task = await session.get(Task, int(task_id))
        if not task:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É (–≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)
        if task.goal_id:
            previous_tasks = await session.execute(
                select(Task)
                .where(
                    Task.goal_id == task.goal_id,
                    Task.order < task.order,
                    Task.is_completed == False
                )
            )
            if previous_tasks.scalars().first():
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏ —Ü–µ–ª–∏")
                return

        task.is_completed = True
        await session.commit()

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ü–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if task.goal_id:
            await update_task_deadline(task, session)
            await update_goal_progress(task.goal_id, session)

        await message.answer(f"–ó–∞–¥–∞—á–∞ '{task.title}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def set_tone_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–°—Ç—Ä–æ–≥–∏–π")
    await ToneStates.waiting_for_tone.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)

async def tone_selected(message: types.Message, state: FSMContext):
    tone_mapping = {"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π": "neutral", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π": "friendly", "–°—Ç—Ä–æ–≥–∏–π": "strict"}
    selected_tone = tone_mapping.get(message.text)
    if selected_tone:
        async with get_db() as session:
            user = await session.get(User, message.from_user.id)
            if user:
                user.tone = selected_tone
                await session.commit()
                await message.answer("–¢–æ–Ω –æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# –û–±—É—á–µ–Ω–∏–µ
async def learn_command(message: types.Message, state: FSMContext):
    await state.set_state(LearningStates.waiting_for_topic)
    await message.answer("–ö–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å?")

async def topic_received(message: types.Message, state: FSMContext):
    topic = message.text
    async with get_db() as session:
        user = await session.get(User, message.from_user.id)
        if user:
            user.learning_topic = topic
            user.learning_progress = 0
            await session.commit()
            learning_plan = await generate_personalized_message(user, 'learning_plan', topic=topic)
            await message.answer(learning_plan)
            
            from scheduler import scheduler, check_learning_progress
            scheduler.add_job(check_learning_progress, 'interval', days=1, args=[user.user_id])
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

async def suggest_resources(message: types.Message):
    user_id = message.from_user.id
    async with get_db() as session:
        user = await session.get(User, user_id)
        if user and user.learning_topic:
            resources = await generate_personalized_message(user, 'learning_resources', topic=user.learning_topic)
            await message.answer(resources)
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /learn.")

async def financial_advice_command(message: types.Message):
    user_id = message.from_user.id
    try:
        async with get_db() as session:
            user = await session.get(User, user_id)
            financial_records = await session.execute(
                select(FinancialRecord).where(FinancialRecord.user_id == user_id)
            )
            records = financial_records.scalars().all()
        
        advice = await send_personalized_message(message.bot, user_id, 'financial_advice', records=records)
        await message.answer(advice)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def visualize_goals(message: types.Message):
    user_id = message.from_user.id
    async with get_db() as session:
        goals = await session.execute(
            select(Goal).where(Goal.user_id == user_id)
        )
        goals = goals.scalars().all()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 6))
    for goal in goals:
        plt.bar(goal.title, goal.progress)
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π")
    plt.xlabel("–¶–µ–ª–∏")
    plt.ylabel("–ü—Ä–æ–≥—Ä–µ—Å—Å (%)")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_photo(FSInputFile(buf, filename="goals_progress.png"))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(router: Router):
    router.message.register(start_command, Command("start"))
    router.message.register(show_tasks, Command("tasks"))
    router.message.register(edit_task_command, Command("edit"))
    router.message.register(complete_task_command, Command("complete"))
    router.message.register(set_tone_command, Command("set_tone"))
    router.message.register(learn_command, Command("learn"))
    router.message.register(suggest_resources, Command("resources"))
    router.message.register(financial_advice_command, Command("financial_advice"))
    router.message.register(visualize_goals, Command("visualize_goals"))
    router.message.register(tone_selected, ToneStates.waiting_for_tone)
    router.message.register(topic_received, LearningStates.waiting_for_topic)
    router.message.register(start_goal_creation, Command("new_goal"))
    router.message.register(process_goal_title, GoalCreationStates.waiting_for_title)
    router.message.register(process_experience, GoalCreationStates.waiting_for_experience)
    router.message.register(process_available_time, GoalCreationStates.waiting_for_available_time)

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    router.message.register(process_message, F.content_type == types.ContentType.TEXT)
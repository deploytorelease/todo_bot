from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from contextlib import contextmanager
from aiogram import types
from aiogram.fsm.context import FSMContext
from datetime import datetime
from message_utils import (
    generate_message, 
    send_personalized_message,
    analyze_user_message
)

class DialogStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    discussing_task = State()      # –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    analyzing_problem = State()    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    offering_solutions = State()   # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
    setting_next_steps = State()   # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    taking_break = State()         # –ü–µ—Ä–µ—Ä—ã–≤ –≤ –¥–∏–∞–ª–æ–≥–µ

class DialogContext:
    """–•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
    def __init__(self):
        self.topic = None           # –¢–µ–º–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        self.identified_issues = [] # –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        self.proposed_solutions = [] # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        self.next_steps = []        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        self.start_time = None      # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
        self.messages_count = 0     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ

async def start_dialog_mode(message: types.Message, state: FSMContext, topic: str):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    dialog_context = DialogContext()
    dialog_context.topic = topic
    dialog_context.start_time = datetime.now()
    
    await state.set_data({"dialog_context": dialog_context})
    await state.set_state(DialogStates.analyzing_problem)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="ü§î –û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É", callback_data="discuss_problem"),
                InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data="suggest_solution")
            ],
            [
                InlineKeyboardButton(text="üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data="make_plan"),
                InlineKeyboardButton(text="‚è∏Ô∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data="take_break")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")
            ]
        ]
    )
    
    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ–±—Å—É–¥–∏—Ç—å —Ç–µ–º—É: {topic}
    
    –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ:
    1. –ü–æ–∫–∞–∂–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
    2. –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    3. –î–∞–π –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≥–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å
    
    –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–ø–ª—ã–º –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫ –¥–∏–∞–ª–æ–≥—É.
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    """
    
    initial_message = await generate_message(
        user_id=message.from_user.id,
        message_type='dialog_start',
        use_context=True,
        topic=topic
    )
    await message.answer(initial_message, reply_markup=keyboard)

async def handle_dialog_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ"""
    action = callback.data
    state_data = await state.get_data()
    dialog_context: DialogContext = state_data.get("dialog_context")
    
    if not dialog_context:
        await callback.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return

    if action == "discuss_problem":
        await state.set_state(DialogStates.analyzing_problem)
        prompt = f"""
        –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_context.topic}
        –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {dialog_context.identified_issues}
        
        –°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –ó–∞–¥–∞—Å—Ç 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
        2. –ü–æ–∫–∞–∂–µ—Ç —Å–≤—è–∑—å —Å —É–∂–µ –æ–±—Å—É–∂–¥–µ–Ω–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏
        3. –ü–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏
        
        –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
        """
        
    elif action == "suggest_solution":
        await state.set_state(DialogStates.offering_solutions)
        prompt = f"""
        –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_context.topic}
        –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {dialog_context.identified_issues}
        
        –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –°–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–µ–Ω—å–∫–∏–π, –≤—ã–ø–æ–ª–Ω–∏–º—ã–π –ø–µ—Ä–≤—ã–π —à–∞–≥
        3. –û–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏.
        """
        
    elif action == "make_plan":
        await state.set_state(DialogStates.setting_next_steps)
        prompt = f"""
        –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_context.topic}
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: {dialog_context.proposed_solutions}
        
        –°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç —Ä–∞–∑–±–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏
        2. –°–ø—Ä–æ—Å–∏—Ç –æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ä–æ–∫–∞—Ö
        3. –£—Ç–æ—á–Ω–∏—Ç, –∫–∞–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω—É–∂–Ω–∞
        
        –§–æ–∫—É—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ, –≤—ã–ø–æ–ª–Ω–∏–º–æ–≥–æ –ø–ª–∞–Ω–∞.
        """
        
    elif action == "take_break":
        await state.set_state(DialogStates.taking_break)
        prompt = f"""
        –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_context.topic}
        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {(datetime.now() - dialog_context.start_time).minutes} –º–∏–Ω—É—Ç
        
        –°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –ü–æ–¥—ã—Ç–æ–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É –ø–æ–∑–∂–µ
        3. –ù–∞–ø–æ–º–Ω–∏—Ç –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç–¥—ã—Ö–∞
        
        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –¥–∏–∞–ª–æ–≥—É.
        """
        
    elif action == "end_dialog":
        prompt = f"""
        –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_context.topic}
        –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {dialog_context.identified_issues}
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: {dialog_context.proposed_solutions}
        –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: {dialog_context.next_steps}
        
        –°–æ–∑–¥–∞–π –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –ö—Ä–∞—Ç–∫–æ –ø–æ–¥—ã—Ç–æ–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —à–∞–≥–∏
        2. –í—ã—Ä–∞–∑–∏—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        3. –ù–∞–ø–æ–º–Ω–∏—Ç, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
        
        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–º–∞.
        """
        await state.clear()
    
    message = await generate_message(prompt)
    await callback.message.answer(message)
    await callback.answer()

async def handle_user_dialog_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
    current_state = await state.get_state()
    state_data = await state.get_data()
    dialog_context: DialogContext = state_data.get("dialog_context")
    
    if not dialog_context or not current_state:
        return
        
    dialog_context.messages_count += 1
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GPT –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    analysis_prompt = f"""
    –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {current_state}
    –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {dialog_context.topic}
    –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}
    
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
    1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã/–æ–ø–∞—Å–µ–Ω–∏—è
    2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    3. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—è–º
    4. –ù—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    
    –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    
    analysis = await analyze_user_message(analysis_prompt)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    if current_state == DialogStates.analyzing_problem.state:
        dialog_context.identified_issues.append(analysis.get('problems', []))
    elif current_state == DialogStates.offering_solutions.state:
        dialog_context.proposed_solutions.append(analysis.get('proposed_solutions', []))
    elif current_state == DialogStates.setting_next_steps.state:
        dialog_context.next_steps.append(analysis.get('action_items', []))
    
    await state.update_data({"dialog_context": dialog_context})
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    response_prompt = f"""
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {dialog_context}
    –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {analysis}
    
    –°–æ–∑–¥–∞–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π:
    1. –û—Ç—Ä–∞–∑–∏—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
    3. –°–æ—Ö—Ä–∞–Ω–∏—Ç —Ñ–æ–∫—É—Å –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    
    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º.
    """
    
    response = await generate_message(response_prompt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    keyboard = get_context_specific_keyboard(analysis)
    
    await message.answer(response, reply_markup=keyboard)

def get_context_specific_keyboard(analysis: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
    buttons = []
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
    base_row = [
        InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data="suggest_solution"),
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if analysis.get('needs_emotional_support'):
        buttons.append([
            InlineKeyboardButton(text="ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="emotional_support")
        ])
    
    if analysis.get('ready_for_action'):
        buttons.append([
            InlineKeyboardButton(text="üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data="make_plan")
        ])
    
    if analysis.get('needs_clarification'):
        buttons.append([
            InlineKeyboardButton(text="ü§î –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="clarify_details")
        ])
    
    buttons.append(base_row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)
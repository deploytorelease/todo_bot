"""Добавление таблицы user_emotional_states

Revision ID: f834d296bf25
Revises: 
Create Date: 2024-11-14 01:01:18.345873

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f834d296bf25'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dialog_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('topic', sa.String(), nullable=True),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('messages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('identified_issues', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('proposed_solutions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('next_steps', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('effectiveness_rating', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_emotional_states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('state', sa.Enum('MOTIVATED', 'STRESSED', 'OVERWHELMED', 'FOCUSED', 'PROCRASTINATING', 'NEUTRAL', name='emotionalstate'), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_interaction_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('task_completion_rate', sa.Float(), nullable=True),
    sa.Column('average_task_delay', sa.Integer(), nullable=True),
    sa.Column('task_complexity_preference', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('most_productive_hours', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('response_times', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('break_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('preferred_interaction_style', sa.String(), nullable=True),
    sa.Column('communication_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('support_effectiveness', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dialog_emotional_states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('state', sa.Enum('MOTIVATED', 'STRESSED', 'OVERWHELMED', 'FOCUSED', 'PROCRASTINATING', 'NEUTRAL', name='emotionalstate'), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('triggers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['dialog_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('goal_categories')
    op.add_column('completed_tasks', sa.Column('time_spent', sa.Interval(), nullable=True))
    op.add_column('completed_tasks', sa.Column('difficulty_rating', sa.Integer(), nullable=True))
    op.add_column('completed_tasks', sa.Column('completion_notes', sa.Text(), nullable=True))
    op.add_column('goal_steps', sa.Column('completion_date', sa.DateTime(), nullable=True))
    op.add_column('goal_steps', sa.Column('expected_duration', sa.Interval(), nullable=True))
    op.add_column('goal_steps', sa.Column('actual_duration', sa.Interval(), nullable=True))
    op.add_column('goal_steps', sa.Column('dependencies', sa.String(), nullable=True))
    op.add_column('milestones', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('milestones', sa.Column('completion_notes', sa.Text(), nullable=True))
    op.drop_constraint('reminder_effectiveness_user_id_unique', 'reminder_effectiveness', type_='unique')
    op.drop_constraint('task_categories_name_unique', 'task_categories', type_='unique')
    op.drop_index('idx_tasks_category_id', table_name='tasks')
    op.drop_index('idx_tasks_due_date', table_name='tasks')
    op.drop_column('tasks', 'actual_start_date')
    op.add_column('users', sa.Column('interaction_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('productivity_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('stress_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('achievement_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('current_challenges', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('users', sa.Column('support_history', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_index('ix_users_user_id', table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_users_user_id', 'users', ['user_id'], unique=False)
    op.drop_column('users', 'support_history')
    op.drop_column('users', 'current_challenges')
    op.drop_column('users', 'achievement_history')
    op.drop_column('users', 'stress_indicators')
    op.drop_column('users', 'productivity_patterns')
    op.drop_column('users', 'interaction_preferences')
    op.add_column('tasks', sa.Column('actual_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_index('idx_tasks_due_date', 'tasks', ['due_date'], unique=False)
    op.create_index('idx_tasks_category_id', 'tasks', ['category_id'], unique=False)
    op.create_unique_constraint('task_categories_name_unique', 'task_categories', ['name'])
    op.create_unique_constraint('reminder_effectiveness_user_id_unique', 'reminder_effectiveness', ['user_id'])
    op.drop_column('milestones', 'completion_notes')
    op.drop_column('milestones', 'description')
    op.drop_column('goal_steps', 'dependencies')
    op.drop_column('goal_steps', 'actual_duration')
    op.drop_column('goal_steps', 'expected_duration')
    op.drop_column('goal_steps', 'completion_date')
    op.drop_column('completed_tasks', 'completion_notes')
    op.drop_column('completed_tasks', 'difficulty_rating')
    op.drop_column('completed_tasks', 'time_spent')
    op.create_table('goal_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('base_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('complexity_factor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='goal_categories_pkey')
    )
    op.drop_table('dialog_emotional_states')
    op.drop_table('user_interaction_metrics')
    op.drop_table('user_emotional_states')
    op.drop_table('dialog_sessions')
    # ### end Alembic commands ###

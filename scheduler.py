from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from sqlalchemy import select, or_, func
from models import Task, User, FinancialRecord, RegularPayment, ReminderEffectiveness, TaskCategory
from ai_module import generate_personalized_message, analyze_expenses
from database import get_db
from message_utils import send_personalized_message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import json


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

scheduler = AsyncIOScheduler()

def start_scheduler(bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler.start()
    logger.info("Scheduler started")
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    scheduler.add_job(send_daily_summary, 'cron', hour=9, minute=0, args=[bot])
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
    scheduler.add_job(check_tasks, 'interval', minutes=15, args=[bot])
    scheduler.add_job(send_overdue_reminders, 'interval', minutes=30, args=[bot])
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    scheduler.add_job(weekly_expense_analysis, 'cron', 
                     day_of_week='mon', hour=9, minute=0, args=[bot])
    scheduler.add_job(process_regular_payments, 'cron', 
                     day_of_week='mon', hour=9, minute=0, args=[bot])
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler.add_job(analyze_reminder_effectiveness, 'cron', 
                     hour=3, minute=0, args=[bot])
    
    logger.info("All jobs added to scheduler")

async def send_overdue_reminders(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    
    try:
        async with get_db() as session:
            now = datetime.now()
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–≤–Ω–æ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏
            result = await session.execute(
                select(Task, User).join(User).where(
                    Task.due_date <= now,
                    Task.is_completed == False,
                    or_(
                        Task.last_overdue_reminder == None,
                        Task.last_overdue_reminder <= now - timedelta(hours=4)  # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
                    )
                )
            )
            tasks = result.all()

            for task, user in tasks:
                try:
                    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –¥–µ–¥–ª–∞–π–Ω–∞
                    overdue_time = now - task.due_date
                    overdue_hours = overdue_time.total_seconds() / 3600

                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏
                    if overdue_hours < 24:
                        severity = "‚ö†Ô∏è"
                        time_text = f"{int(overdue_hours)} —á–∞—Å(–æ–≤)"
                    else:
                        severity = "üö®"
                        days = int(overdue_hours / 24)
                        time_text = f"{days} –¥–Ω–µ–π"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                                            callback_data=f"complete_{task.id}")],
                        [InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ä–æ–∫", 
                                            callback_data=f"reschedule_{task.id}")],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", 
                                            callback_data=f"cancel_{task.id}")]
                    ])

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await generate_personalized_message(
                        user,
                        'overdue_reminder',
                        task_title=task.title,
                        overdue_time=time_text
                    )

                    await bot.send_message(
                        chat_id=user.user_id,
                        text=f"{severity} {message}",
                        reply_markup=keyboard
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    task.last_overdue_reminder = now
                    task.reminder_count = (task.reminder_count or 0) + 1
                    await session.commit()

                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ {task.id}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ {task.id}: {e}")
                    continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")

async def send_daily_summary(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏")
    try:
        async with get_db() as session:
            users = await session.execute(select(User))
            for user in users.scalars():
                try:
                    today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                    today_end = today_start + timedelta(days=1)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    tasks_query = await session.execute(
                        select(Task, TaskCategory)
                        .outerjoin(TaskCategory)
                        .where(
                            Task.user_id == user.user_id,
                            Task.is_completed == False
                        )
                        .order_by(TaskCategory.priority.desc(), Task.due_date)
                    )
                    all_tasks = tasks_query.all()
                    
                    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º
                    today_tasks = []
                    overdue_tasks = []
                    upcoming_tasks = []
                    for task, category in all_tasks:
                        if task.due_date < today_start:
                            overdue_tasks.append((task, category))
                        elif task.due_date <= today_end:
                            today_tasks.append((task, category))
                        elif task.due_date <= today_end + timedelta(days=2):
                            upcoming_tasks.append((task, category))
                    
                    if any([today_tasks, overdue_tasks, upcoming_tasks]):
                        message = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –≤–∞—à–∞ —Å–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á:\n\n"
                        
                        if overdue_tasks:
                            message += "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
                            for task, category in overdue_tasks:
                                days_overdue = (datetime.now() - task.due_date).days
                                category_name = category.name if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                                message += (f"‚Ä¢ [{category_name}] {task.title}"
                                          f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days_overdue} –¥–Ω.)\n")
                            message += "\n"
                        
                        if today_tasks:
                            message += "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                            for task, category in today_tasks:
                                category_name = category.name if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                                message += (f"‚Ä¢ [{category_name}] {task.title}"
                                          f" (–∫ {task.due_date.strftime('%H:%M')})\n")
                            message += "\n"
                        
                        if upcoming_tasks:
                            message += "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:\n"
                            for task, category in upcoming_tasks:
                                category_name = category.name if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                                message += (f"‚Ä¢ [{category_name}] {task.title}"
                                          f" ({task.due_date.strftime('%d.%m %H:%M')})\n")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        completed_today = await session.execute(
                            select(func.count(Task.id))
                            .where(
                                Task.user_id == user.user_id,
                                Task.completion_date >= today_start,
                                Task.is_completed == True
                            )
                        )
                        completed_count = completed_today.scalar_one()
                        
                        if completed_count > 0:
                            message += f"\n‚ú® –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {completed_count} –∑–∞–¥–∞—á!"
                        
                        await bot.send_message(chat_id=user.user_id, text=message)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
                    continue
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

async def analyze_reminder_effectiveness(bot):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_db() as session:
            users = await session.execute(select(User))
            for user in users.scalars():
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    tasks = await session.execute(
                        select(Task)
                        .where(Task.user_id == user.user_id)
                        .order_by(Task.created_at.desc())
                        .limit(20)
                    )
                    tasks = tasks.scalars().all()
                    if tasks:
                        total_tasks = len(tasks)
                        completed_tasks = sum(1 for task in tasks if task.is_completed)
                        completed_on_time = sum(1 for task in tasks 
                                              if task.is_completed and task.completion_date <= task.due_date)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                        completion_rate = completed_tasks / total_tasks
                        on_time_rate = completed_on_time / completed_tasks if completed_tasks > 0 else 0
                        
                        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        completion_times = []
                        for task in tasks:
                            if task.is_completed and task.last_reminder:
                                time_diff = task.completion_date - task.last_reminder
                                completion_times.append(time_diff.total_seconds())
                        
                        avg_completion_time = (sum(completion_times) / len(completion_times) 
                                             if completion_times else 0)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                        effectiveness = await session.execute(
                            select(ReminderEffectiveness)
                            .where(ReminderEffectiveness.user_id == user.user_id)
                        )
                        effectiveness = effectiveness.scalar_one_or_none()
                        
                        if effectiveness:
                            effectiveness.completion_rate = completion_rate
                            effectiveness.on_time_rate = on_time_rate
                            effectiveness.average_completion_time = timedelta(seconds=avg_completion_time)
                            effectiveness.updated_at = datetime.now()
                        else:
                            effectiveness = ReminderEffectiveness(
                                user_id=user.user_id,
                                completion_rate=completion_rate,
                                on_time_rate=on_time_rate,
                                average_completion_time=timedelta(seconds=avg_completion_time)
                            )
                            session.add(effectiveness)
                        
                        await session.commit()
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
                    continue
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def calculate_next_reminder_interval(user_id: int, task: Task) -> timedelta:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        async with get_db() as session:
            effectiveness = await session.execute(
                select(ReminderEffectiveness)
                .where(ReminderEffectiveness.user_id == user_id)
            )
            effectiveness = effectiveness.scalar_one_or_none()
            
            if not effectiveness:
                return timedelta(minutes=30)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            base_interval = timedelta(minutes=30)
            if effectiveness.completion_rate < 0.3:
                base_interval = timedelta(minutes=15)  # –ß–∞—â–µ –¥–ª—è –º–µ–Ω–µ–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            elif effectiveness.completion_rate > 0.7:
                base_interval = timedelta(hours=1)  # –†–µ–∂–µ –¥–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
            time_until_due = task.due_date - datetime.now()
            if time_until_due < timedelta(hours=1):
                base_interval = timedelta(minutes=10)  # –û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –±–ª–∏–∑–∫–æ–º –¥–µ–¥–ª–∞–π–Ω–µ
            elif time_until_due < timedelta(hours=3):
                base_interval = min(base_interval, timedelta(minutes=20))
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if task.reminder_count and task.reminder_count > 3:
                base_interval *= 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ —É–∂–µ –º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏
            
            return base_interval
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return timedelta(minutes=30)

async def send_task_reminder(bot, user_id: int, task_id: int, reminder_type: str = 'regular'):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∏—Å—Ç–æ—Ä–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        task_id: ID –∑–∞–¥–∞—á–∏
        reminder_type: –¢–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ('regular', 'urgent', 'overdue')
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è type={reminder_type} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        async with get_db() as session:
            task = await session.get(Task, task_id)
            user = await session.get(User, user_id)
            
            if not task or task.is_completed:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            effectiveness = await session.execute(
                select(ReminderEffectiveness)
                .where(ReminderEffectiveness.user_id == user_id)
                .order_by(ReminderEffectiveness.updated_at.desc())
                .limit(1)
            )
            effectiveness = effectiveness.scalar_one_or_none()
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if effectiveness:
                if effectiveness.completion_rate < 0.3:  # –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    reminder_type = 'urgent'  # –£—Å–∏–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
                elif effectiveness.average_completion_time.total_seconds() > 86400:  # –ë–æ–ª—å—à–µ —Å—É—Ç–æ–∫
                    reminder_type = 'motivational'  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                                    callback_data=f"complete_{task_id}")],
                [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å", 
                                    callback_data=f"remind_1h_{task_id}")],
                [InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", 
                                    callback_data=f"postpone_1d_{task_id}")]
            ])
            
            if reminder_type == 'overdue':
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É",
                        callback_data=f"cancel_{task_id}"
                    )
                ])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = {
                'task_title': task.title,
                'due_date': task.due_date.strftime("%d.%m.%Y %H:%M"),
                'overdue_time': str(datetime.now() - task.due_date) if reminder_type == 'overdue' else None,
                'previous_reminders': task.reminder_count or 0,
                'effectiveness': effectiveness.to_dict() if effectiveness else None
            }
            
            message = await generate_personalized_message(
                user,
                f'task_reminder_{reminder_type}',
                **message_data
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            format_tags = {
                'regular': 'üìù',
                'urgent': '‚ö†Ô∏è',
                'overdue': 'üö®',
                'motivational': 'üí™'
            }
            formatted_message = f"{format_tags[reminder_type]} {message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=user_id,
                text=formatted_message,
                reply_markup=keyboard
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
            task.last_reminder = datetime.now()
            task.reminder_count = (task.reminder_count or 0) + 1
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            next_interval = await calculate_next_reminder_interval(user_id, task)
            next_reminder_time = datetime.now() + next_interval
            
            scheduler.add_job(
                send_task_reminder,
                'date',
                run_date=next_reminder_time,
                args=[bot, user_id, task_id, 'regular']
            )
            await session.commit()
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}", exc_info=True)

async def check_tasks(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á")
    try:
        async with get_db() as session:
            now = datetime.now()
            upcoming_window = now + timedelta(hours=2)
            
            tasks = await session.execute(
                select(Task, User).join(User).where(
                    Task.due_date.between(now, upcoming_window),
                    Task.is_completed == False,
                    or_(
                        Task.last_reminder == None,
                        Task.last_reminder <= now - timedelta(minutes=30)
                    )
                )
            )
            tasks = tasks.all()
            
            for task, user in tasks:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
                    time_window_start = task.due_date - timedelta(hours=1)
                    time_window_end = task.due_date + timedelta(hours=1)
                    
                    tasks_in_period = await session.execute(
                        select(func.count(Task.id)).where(
                            Task.user_id == user.user_id,
                            Task.due_date.between(time_window_start, time_window_end),
                            Task.is_completed == False
                        )
                    )
                    tasks_count = tasks_in_period.scalar_one()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    if task.due_date <= now:
                        reminder_type = 'overdue'
                    elif task.due_date <= now + timedelta(minutes=30):
                        reminder_type = 'urgent'
                    else:
                        reminder_type = 'regular'
                    
                    # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –≤ –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    if tasks_count > 1:
                        await send_workload_warning(bot, user, task.due_date, tasks_count)
                    
                    await send_task_reminder(bot, user.user_id, task.id, reminder_type)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
                    continue
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á: {e}")

async def send_workload_warning(bot, user, time_period, tasks_count):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞—á –≤ –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥"""
    try:
        message = await generate_personalized_message(
            user,
            'multiple_tasks_warning',
            tasks_count=tasks_count,
            time_period=time_period.strftime("%H:%M")
        )
        
        await bot.send_message(
            chat_id=user.user_id,
            text=f"‚ö†Ô∏è {message}",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ: {e}")

async def weekly_expense_analysis(bot):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("–ù–∞—á–∞–ª–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤")
    async with get_db() as session:
        users = await session.execute(select(User))
        users = users.scalars().all()

        for user in users:
            if user.last_expense_analysis is None or (datetime.now() - user.last_expense_analysis).days >= 7:
                week_ago = datetime.now() - timedelta(days=7)
                financial_records = await session.execute(
                    select(FinancialRecord)
                    .where(FinancialRecord.user_id == user.user_id)
                    .where(FinancialRecord.date >= week_ago)
                )
                financial_records = financial_records.scalars().all()

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                expense_data = [
                    {
                        "amount": record.amount,
                        "currency": record.currency,
                        "category": record.category,
                        "description": record.description,
                        "date": record.date.isoformat(),
                        "is_planned": record.is_planned,
                        "is_savings": record.is_savings
                    }
                    for record in financial_records if record.type == 'expense'
                ]

                income_data = [
                    {
                        "amount": record.amount,
                        "currency": record.currency,
                        "category": record.category,
                        "description": record.description,
                        "date": record.date.isoformat()
                    }
                    for record in financial_records if record.type == 'income'
                ]

                analysis = await analyze_expenses(expense_data, income_data)

                await bot.send_message(chat_id=user.user_id, text=analysis)
                user.last_expense_analysis = datetime.now()
                await session.commit()

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤")
async def process_regular_payments(bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
    async with get_db() as session:
        today = datetime.now().date()
        payments = await session.execute(
            select(RegularPayment).where(RegularPayment.next_payment_date <= today)
        )
        payments = payments.scalars().all()

        for payment in payments:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                new_record = FinancialRecord(
                    user_id=payment.user_id,
                    amount=payment.amount,
                    currency=payment.currency,
                    category=payment.category,
                    description=payment.description,
                    type='expense',
                    is_planned=True,
                    date=datetime.now()
                )
                session.add(new_record)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                if payment.frequency == 'monthly':
                    payment.next_payment_date += timedelta(days=30)
                elif payment.frequency == 'quarterly':
                    payment.next_payment_date += timedelta(days=91)
                elif payment.frequency == 'annually':
                    payment.next_payment_date += timedelta(days=365)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                message = await generate_personalized_message(
                    user_id=payment.user_id,
                    message_type='regular_payment',
                    amount=payment.amount,
                    currency=payment.currency,
                    category=payment.category
                )
                
                await bot.send_message(
                    chat_id=payment.user_id,
                    text=message
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment.id}: {e}")
                continue

        await session.commit()
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")